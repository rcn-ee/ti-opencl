/*
 * Copyright (c) 2012-2014 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== Host.cfg ========
 *  Platform: DRA7XX_bios_elf
 *  Target: gnu.targets.arm.A15F
 */
 
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text'); 

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Registry');

xdc.useModule('ti.sdo.ipc.Ipc');
xdc.useModule('ti.sdo.ipc.MessageQ');
xdc.useModule('ti.sdo.ipc.SharedRegion');
xdc.useModule('ti.sdo.utils.MultiProc');

xdc.useModule('ti.sysbios.knl.Task');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
if (Program.build.profile == "debug") {
    BIOS.libType = BIOS.LibType_Debug;
    BIOS.assertsEnabled = true;
} else {
    BIOS.libType = BIOS.LibType_Custom;
    BIOS.assertsEnabled = false;
}
if (BIOS.version <= 0x65200) {
    var Settings = xdc.useModule('ti.sysbios.posix.Settings');
    Settings.supportsMutexPriority = true;
} else {
    var Settings = xdc.useModule('ti.posix.tirtos.Settings');
    Settings.enableMutexPriority = true;
}

/* Circular buffer size for System_printf() */
System.SupportProxy = SysMin;
SysMin.bufSize = 0x1000;
SysMin.flushAtExit = false;


/*
 *  ======== IPC Configuration ========
 */
xdc.global.SR0_cacheEnable = true;
xdc.global.oclProcName = "HOST";
var OpenCL = xdc.useModule('ti.opencl.OpenCL');

/* select ipc libraries */
var Build = xdc.useModule('ti.sdo.ipc.Build');
if (Program.build.profile == "debug") {
   Build.libType = Build.LibType_Debug;
   Build.assertsEnabled = false;
   Build.logsEnabled = true;
} else {
   Build.libType = Build.LibType_Custom;
   Build.assertsEnabled = false;
   Build.logsEnabled = false;
}


/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0x100000;
Program.argSize = 0x400;  /* minimum size */
Program.stack = 0x100000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams   = new HeapMem.Params;
heapMemParams.size  = 0x800000;
heapMemParams.align = 0x80;
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);


/* Enable Cache */
var Cache = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
Cache.enableCache = true;

/***********************************************
 *              MMU Configuration              *
 ***********************************************/
var Mmu = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');
Mmu.enableMMU = true;

/******************************************************************************
 *
 * SYS/BIOS assigns the following defaults to MAIR0 ATTR0, ATTR1 and ATTR2:
 * 
 * ATTR0 -> 0x44 (mark memory region as non-cacheable normal memory)
 * ATTR1 -> 0x04 (mark memory region as device memory, i.e. strongly
 * ordered and non-cacheable)
 * ATTR2 -> 0xFF (mark memory region as normal memory, RW cacheable and
 * RW allocate)
 ******************************************************************************
 */

// descriptor attribute structure
var attrs1 = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(attrs1);
attrs1.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs1.shareable = 2;                      // sharerable
attrs1.attrIndx = 2;                       // Cached, normal memory

var attrs2 = new Mmu.DescriptorAttrs();
Mmu.initDescAttrsMeta(attrs2);
attrs2.type = Mmu.DescriptorType_BLOCK;    // BLOCK descriptor
attrs2.shareable = 2;                      // sharerable
attrs2.attrIndx = 0;                       // Non Cached, normal memory

// Set the descriptor for each entry in the address range
// Each 'BLOCK' descriptor entry spans a 2MB address range
for (var i=0x8B000000; i < 0x8C000000; i = i + 0x00200000) {
    Mmu.setSecondLevelDescMeta(i, i, attrs1);
}
for (var i=0x8C000000; i < 0x8E000000; i = i + 0x00200000) {
    Mmu.setSecondLevelDescMeta(i, i, attrs2);
}
for (var i=0x8E000000; i < 0x8F000000; i = i + 0x00200000) {
    Mmu.setSecondLevelDescMeta(i, i, attrs2);
}
for (var i=0xA0000000; i < 0xFFFFFFFF; i = i + 0x00200000) {
    Mmu.setSecondLevelDescMeta(i, i, attrs1);
}

var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");


   /* Assign GPTimer2 to be used for BIOS Clock 1-ms tick */
/***********************************************
 *          CLOCK Module Configuraion          *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;

/***********************************************
*           Timer Module Configuraion         *
***********************************************/
/* Assign GPTimer2 to be used for Timestamp */
/* Set to 1-ms Tick and Enable Wakeup for OVF interrupt */
// var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
// var timerParams = new Timer.Params();
// timerParams.period = 1000;
// timerParams.twer.ovf_wup_ena = 1;
// timerParams.tiocpCfg.emufree = 1;
// /* Timer ID = 1 for GPTimer2 and input clock runs at 20 MHz */
// Timer.intFreqs[1].hi = 0;
// Timer.intFreqs[1].lo = 20000000;
// //Timer.create(1, '&mainDsp1TimerTick', timerParams);  
// 
// 
// 
// timerParams.period = 20000000;
// timerParams.twer.ovf_wup_ena = 1;
// timerParams.tiocpCfg.emufree = 1;
// /* Timer ID = 1 for GPTimer2 and input clock runs at 20 MHz */
// Timer.intFreqs[1].hi = 0;
// Timer.intFreqs[1].lo = 20000000;
// //var timerInst = Timer.create(9, '&mainTimer', timerParams);  

// Must set this to real ARM frequency, otherwise, timestamps are skewed
BIOS.cpuFreq.lo=1500000000;  // 1.5GHz
var TimestampProvider = xdc.useModule('ti.sysbios.family.arm.a15.TimestampProvider');
TimestampProvider.autoRefreshEnable = true; 

var Idle = xdc.useModule('ti.sysbios.knl.Idle');


/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
if (Program.build.profile == "debug") {
    Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_ON;
    Defaults.common$.diags_ASSERT    = Diags.ALWAYS_ON;
} else {
    Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_OFF;
    Defaults.common$.diags_ASSERT    = Diags.ALWAYS_OFF;
}
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY    = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT     = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO     = Diags.RUNTIME_OFF;
Registry.common$.diags_ANALYSIS = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1    = Diags.RUNTIME_OFF;

/* create a logger instance */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 256;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;

// Enable printf output to the ccs console, requires -lrdimon
var SemiHostSupport = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');

