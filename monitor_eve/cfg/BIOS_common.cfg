/*
 * Copyright (c) 2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/*******************************************************************************
*  file name: BIOS_common.cfg
*  Set Bios configuration - Common across all cores
*  This file is included in all core specific cfg files
*
*******************************************************************************/

/* use modules */
var Task        = xdc.useModule("ti.sysbios.knl.Task");
var BIOS        = xdc.useModule("ti.sysbios.BIOS");
//var Startup     = xdc.useModule("xdc.runtime.Startup");
var SysStd      = xdc.useModule("xdc.runtime.SysStd");
var System      = xdc.useModule("xdc.runtime.System");
//var Log         = xdc.useModule("xdc.runtime.Log");
//var Assert      = xdc.useModule("xdc.runtime.Assert");
//var Program     = xdc.useModule("xdc.cfg.Program");
var Main        = xdc.useModule("xdc.runtime.Main");
//var Memory      = xdc.useModule("xdc.runtime.Memory");
var Diags       = xdc.useModule("xdc.runtime.Diags");
//var Semaphore   = xdc.useModule("ti.sysbios.knl.Semaphore");
//var HeapMem     = xdc.useModule("ti.sysbios.heaps.HeapMem");
//var HeapBuf     = xdc.useModule("ti.sysbios.heaps.HeapBuf");
//var Clock       = xdc.useModule("ti.sysbios.knl.Clock");
//var Timestamp   = xdc.useModule("xdc.runtime.Timestamp");
//var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');
//var Queue       = xdc.useModule('ti.sysbios.knl.Queue');
//var SyncSem     = xdc.useModule('ti.sysbios.syncs.SyncSem');
//var Cache       = xdc.useModule('ti.sysbios.hal.Cache');
//var halCore     = xdc.useModule('ti.sysbios.hal.Core');
//var GateH       = xdc.useModule('xdc.runtime.knl.GateH');
//var Event       = xdc.useModule('ti.sysbios.knl.Event');
//var biosGates   = xdc.useModule('ti.sysbios.gates.GateTask');

/* BIOS library type, same setting is used by IPC as well */
BIOS.libType = BIOS.LibType_Custom;
var SourceDir = xdc.useModule('xdc.cfg.SourceDir');
SourceDir.verbose = 3;

/* Stack size when NULL is passed as stack during TSK create    */
Task.defaultStackSize   = 0x4000;

Main.common$.diags_ASSERT   = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;

/*
Set the proxy for System module. This enables print statements at runtime in
the application
*/
System.SupportProxy = SysStd;


/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Registry');


/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_ON;     /* needed for asserts */
Defaults.common$.diags_ASSERT    = Diags.ALWAYS_ON;     /* development only   */
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;

/* create a logger instance */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 256;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;

