/*
 * Copyright (c) 2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== config.bld ========
 *
 */
var Build = xdc.useModule('xdc.bld.BuildEnvironment');

var core = environment["CORE"];
xdc.print("# !!! CORE is [" + core + "] !!!")
var MemSegDefine = xdc.loadCapsule("mem_segment_definition_linux.xs");
var memmap = MemSegDefine.getMemSegmentDefinition_external(core)

Build.platformTable["ti.platforms.evmDRA7XX:ipu1"] = {
    externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
    codeMemory: "IPU1_CODE_MEM",
    dataMemory: "IPU1_DATA_MEM",
    stackMemory: "IPU1_DATA_MEM",
};


Build.platformTable["ti.platforms.evmDRA7XX:eve1"] =
{
    externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
    codeMemory:"EVE1_CODE_MEM",
    dataMemory:"EVE1_DATA_MEM",
    stackMemory:"EVE1_DATA_MEM"
};

Build.platformTable["ti.platforms.evmDRA7XX:eve2"] =
{
    externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
    codeMemory:"EVE2_CODE_MEM",
    dataMemory:"EVE2_DATA_MEM",
    stackMemory:"EVE2_DATA_MEM"
};

Build.platformTable["ti.platforms.evmDRA7XX:eve3"] =
{
    externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
    codeMemory:"EVE3_CODE_MEM",
    dataMemory:"EVE3_DATA_MEM",
    stackMemory:"EVE3_DATA_MEM"
};

Build.platformTable["ti.platforms.evmDRA7XX:eve4"] =
{
    externalMemoryMap: MemSegDefine.getMemSegmentDefinition_external(core),
    codeMemory:"EVE4_CODE_MEM",
    dataMemory:"EVE4_DATA_MEM",
    stackMemory:"EVE4_DATA_MEM"
};
