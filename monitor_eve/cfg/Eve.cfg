/*
 * Copyright (c) 2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*******************************************************************************
*  file name: Eve.cfg
*  Set EVE core specific configuration
*  Platform: VAYU_bios_elf
*  Target: ti.targets.arp32.elf.ARP32_far
*
*******************************************************************************/

var A15TargetOS     = "Linux";
var core = environment["CORE"];
if (core != "EVE1" && core != "EVE2" && core != "EVE3" && core != "EVE4")
{
    print("CORE " + core + " not supported!");
    throw new Error("CORE " + core + " not supported!");
}

xdc.loadPackage('ti.sysbios').profile = "release";

/*
 * Clock tick in microseconds
 * Since a clock tick of 1ms is too high for EVE processing and 
 * adds a constant CPU load overhead, which can be avoided if a larger
 * Clock.tickPeriod is choosen
 */
var Clock        = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickPeriod = 1000*10;
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 267500000; /* 267.5 MHz */
BIOS.libType = BIOS.LibType_Custom;
var SourceDir = xdc.useModule('xdc.cfg.SourceDir');
SourceDir.verbose = 3;


/***********************************************
 *          Reset Module Configuraion        *
 ***********************************************/
var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns[Reset.fxns.length++] = "&eve1MmuConfig";

/*
 *  ======== IPC Configuration ========
 */
Program.global.procName = String(core);
xdc.loadCapsule("ipc.cfg.xs");

var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');
//MessageQ.SetupTransportProxy = xdc.useModule(
//                               'ti.sdo.ipc.transports.TransportShmNotifySetup');

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x1000;

var Task        = xdc.useModule("ti.sysbios.knl.Task");
Task.defaultStackSize   = 0x4000;

/* Set the proxy for System module. */
var SysStd      = xdc.useModule("xdc.runtime.SysStd");
var System      = xdc.useModule("xdc.runtime.System");
System.SupportProxy = SysStd;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x4000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

// Heap ID 0 for host messages, 1 for EVE, must be the same as in Ipu1.cfg
Program.global.XDC_CFG_HeapID_Host = 0;
Program.global.XDC_CFG_HeapID_Eve  = 1;

var EVE_VECS_MEM = core + "_VECS_MEM";
var EVE_CODE_MEM = core + "_CODE_MEM";
var EVE_DATA_MEM = core + "_DATA_MEM";

Program.sectMap[".inthandler"]              = EVE_CODE_MEM;
Program.sectMap[".text"]                    = EVE_CODE_MEM;
Program.sectMap[".vecs"]                    = EVE_VECS_MEM;
Program.sectMap[".bss:taskStackSection"]    = EVE_DATA_MEM;
Program.sectMap[".rodata"]                  = EVE_DATA_MEM;
Program.sectMap[".bss"]                     = EVE_DATA_MEM;
Program.sectMap[".init_array"]              = EVE_DATA_MEM;
Program.sectMap[".const"]                   = EVE_DATA_MEM;
Program.sectMap[".data"]                    = EVE_DATA_MEM;
Program.sectMap[".cinit"]                   = EVE_DATA_MEM;
Program.sectMap[".switch"]                  = EVE_DATA_MEM;
Program.sectMap[".sysmem"]                  = EVE_DATA_MEM;
Program.sectMap[".far"]                     = EVE_DATA_MEM;
Program.sectMap[".cio"]                     = EVE_DATA_MEM;
Program.sectMap[".fardata"]                 = EVE_DATA_MEM;
Program.sectMap[".stack"]                   = EVE_DATA_MEM;
Program.sectMap[".sysmem"]                  = EVE_DATA_MEM;
Program.sectMap[".args"]                    = EVE_DATA_MEM;
Program.sectMap[".imemha"]                  = "IBUFHA";
Program.sectMap[".imemhb"]                  = "IBUFHB";
Program.sectMap[".imemla"]                  = "IBUFLA";
Program.sectMap[".imemlb"]                  = "IBUFLB";
Program.sectMap[".wmem"]                    = "WBUF";
Program.sectMap[".vcop_parameter_block"]    = "WBUF";
Program.sectMap["Cdata"]                    = "WBUF";
Program.sectMap["Udata"]                    = "WBUF";
Program.sectMap[".bss:taskStackSection:ipc"]= EVE_DATA_MEM;
Program.sectMap[".bss:heapMemL2"]           = "DMEM";
Program.sectMap[".dmemSect"]                = "DMEM";
Program.sectMap[".dmem0Sect"]               = "DMEM";
Program.sectMap[".dmem1Sect"]               = EVE_DATA_MEM;
Program.sectMap[".bss:taskStackSection:systemTskMultiMbx"]= "DMEM";


/* ----------------------------- TICK ---------------------------------------*/
/* ENABLING CTM TIMER */
var Timer = xdc.useModule('ti.sysbios.family.arp32.Timer');
var timerParams = new Timer.Params();
/* EVE clock runs at 535 MHz */
timerParams.extFreq.hi = 0;
timerParams.extFreq.lo = 267500000;
timerParams.period = 1000;
Timer.create(1, '&mainARP32_0_TimerTick', timerParams);

var TimestampProvider = xdc.useModule('ti.sysbios.family.arp32.TimestampProvider');
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = TimestampProvider;


/* Add an idle thread 'eve_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
Idle.addFunc('&eve_idleFxn');

/* In order to check how much percentange of Idle time the CPU is in Low power*/
//var LocalTimestampProvider = xdc.useModule('ti.sysbios.family.arp32.TimestampProvider');

/*
 *  ======== Instrumentation Configuration ========
 */
var Diags    = xdc.useModule("xdc.runtime.Diags");
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_ON;     /* needed for asserts */
Defaults.common$.diags_ASSERT    = Diags.ALWAYS_ON;     /* development only   */
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
var Main     = xdc.useModule("xdc.runtime.Main");
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;

Main.common$.diags_ASSERT   = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;

