/*******************************************************************************
 *                                                                             *
 * Copyright (c) 2017 Texas Instruments Incorporated - http://www.ti.com/      *
 *                        ALL RIGHTS RESERVED                                  *
 *                                                                             *
 ******************************************************************************/

/*******************************************************************************
*  file name: Eve.cfg
*  Set EVE core specific configuration
*  Platform: VAYU_bios_elf
*  Target: ti.targets.arp32.elf.ARP32_far
*
*******************************************************************************/

var A15TargetOS     = "Linux";
var core = environment["CORE"];
if (core != "EVE1" && core != "EVE2" && core != "EVE3" && core != "EVE4")
{
    print("CORE " + core + " not supported!");
    throw new Error("CORE " + core + " not supported!");
}

xdc.loadPackage('ti.sysbios').profile = "release";
xdc.loadCapsule("BIOS_common.cfg");

var Clock        = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickPeriod = 1000*10;
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 267500000; /* 267.5 MHz */

/***********************************************
 *          Reset Module Configuraion        *
 ***********************************************/
var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns[Reset.fxns.length++] = "&eve1MmuConfig";

var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

/*
 *  ======== IPC Configuration ========
 */
Program.global.procName = String(core);
xdc.loadCapsule("ipc.cfg.xs");

var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');
//MessageQ.SetupTransportProxy = xdc.useModule(
//                               'ti.sdo.ipc.transports.TransportShmNotifySetup');

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x1000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x4000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

var EVE_VECS_MEM = core + "_VECS_MEM";
var EVE_CODE_MEM = core + "_CODE_MEM";
var EVE_DATA_MEM = core + "_DATA_MEM";

Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:hcfResourceTable"] = "REMOTE_LOG_MEM";

Program.sectMap[".inthandler"]              = EVE_CODE_MEM;
Program.sectMap[".text"]                    = EVE_CODE_MEM;
Program.sectMap[".vecs"]                    = EVE_VECS_MEM;
Program.sectMap[".bss:taskStackSection"]    = EVE_DATA_MEM;
Program.sectMap[".rodata"]                  = EVE_DATA_MEM;
Program.sectMap[".bss"]                     = EVE_DATA_MEM;
Program.sectMap[".init_array"]              = EVE_DATA_MEM;
Program.sectMap[".const"]                   = EVE_DATA_MEM;
Program.sectMap[".data"]                    = EVE_DATA_MEM;
Program.sectMap[".cinit"]                   = EVE_DATA_MEM;
Program.sectMap[".switch"]                  = EVE_DATA_MEM;
Program.sectMap[".sysmem"]                  = EVE_DATA_MEM;
Program.sectMap[".far"]                     = EVE_DATA_MEM;
Program.sectMap[".cio"]                     = EVE_DATA_MEM;
Program.sectMap[".fardata"]                 = EVE_DATA_MEM;
Program.sectMap[".stack"]                   = EVE_DATA_MEM;
Program.sectMap[".sysmem"]                  = EVE_DATA_MEM;
Program.sectMap[".args"]                    = EVE_DATA_MEM;
Program.sectMap[".imemha"]                  = "IBUFHA";
Program.sectMap[".imemhb"]                  = "IBUFHB";
Program.sectMap[".imemla"]                  = "IBUFLA";
Program.sectMap[".imemlb"]                  = "IBUFLB";
Program.sectMap[".wmem"]                    = "WBUF";
Program.sectMap[".vcop_parameter_block"]    = "WBUF";
Program.sectMap["Cdata"]                    = "WBUF";
Program.sectMap["Udata"]                    = "WBUF";
Program.sectMap[".bss:taskStackSection:ipc"]= EVE_DATA_MEM;
Program.sectMap[".bss:heapMemL2"]           = "DMEM";
Program.sectMap[".dmemSect"]                = "DMEM";
Program.sectMap[".bss:taskStackSection:systemTskMultiMbx"]= "DMEM";


/* Exception hook function */
//var ExceptionEve = xdc.useModule('ti.sysbios.family.arm.exc.Exception');

/* enable print of exception handing info */
//ExceptionEve.excHookFunc ='&Utils_eveExceptionHookFxn';
//ExceptionEve.enableDecode=false;

/* XDC runtime function */
//var Error = xdc.useModule("xdc.runtime.Error");
//Error.raiseHook = "&Utils_commonErrorRaiseHook";

/* ENABLING CTM TIMER */
var Timer = xdc.useModule('ti.sysbios.family.arp32.Timer');
var timerParams = new Timer.Params();
timerParams.extFreq.hi = 0;
/* EVE clock runs at 535 MHz */
timerParams.extFreq.lo = 266000000;
timerParams.period = 1000;
Timer.create(1 , '&mainARP32_0_TimerTick', timerParams);

var TimestampProvider = xdc.useModule('ti.sysbios.family.arp32.TimestampProvider');
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = TimestampProvider;

///* ----------------------------- TICK ---------------------------------------*/
///* allocate GPTimer14 & GPTimer15 to EVE (check DTS for availability) */
//var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
//TimerSupport.availMask = 0x6000;
//
//var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
//var timerParams = new Timer.Params();
//timerParams.period = 1000*10;
//timerParams.twer.ovf_wup_ena = 1;
//timerParams.tiocpCfg.emufree = 1;
//timerParams.tiocpCfg.idlemode = 1;
//timerParams.tsicr.posted = 0;
//Timer.intFreqs[13].hi = 0;
//Timer.intFreqs[13].lo = 20000000;
//Timer.checkFrequency = false;
//
//Timer.create(13 , '&mainARP32_0_TimerTick', timerParams);

//var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
//DMTimer.checkFrequency = false;
//DMTimer.intFreqs[14].hi = 0;
//DMTimer.intFreqs[14].lo = 20000000;
//var timerParams2 = new DMTimer.Params();
//timerParams2.tsicr.posted = 0;
//var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
//DMTimestampProvider.timerId = 14;
//DMTimestampProvider.useClockTimer = false;
//var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
//Timestamp.SupportProxy = DMTimestampProvider;


/* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
// Idle.addFunc('&eve_idleFxn');
