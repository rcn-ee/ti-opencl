/*******************************************************************************
 *                                                                             *
 * Copyright (c) 2013 Texas Instruments Incorporated - http://www.ti.com/      *
 *                        ALL RIGHTS RESERVED                                  *
 *                                                                             *
 ******************************************************************************/

/*******************************************************************************
*  file name: IPC_common.cfg
*  Set IPC configuration - Common across all cores
*  This file is included in all core specific cfg files
*
*******************************************************************************/


var Program = xdc.useModule('xdc.cfg.Program');
var cfgArgs = Program.build.cfgArgs;
var A15TargetOS    = java.lang.System.getenv("A15_TARGET_OS");

/* configure processor names */

var procNameAry = new Array();

var curProc = 0;

if(java.lang.System.getenv("PROC_A15_0_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "HOST";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_IPU1_0_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "IPU1-0";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_IPU1_1_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "IPU1-1";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_DSP1_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "DSP1";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_DSP2_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "DSP2";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_EVE1_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "EVE1";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_EVE2_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "EVE2";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_EVE3_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "EVE3";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

if(java.lang.System.getenv("PROC_EVE4_INCLUDE")=="yes")
{
   procNameAry[parseInt(curProc)] = "EVE4";
   xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
   curProc++;
}

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
var Notify    = xdc.useModule('ti.sdo.ipc.Notify');

if( A15TargetOS == "Bios")
{
   xdc.loadCapsule("src/main_app/tda2xx/cfg/IPC_NotifyDrv.cfg");
}

var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');

/* total number of heaps that can be registered with message
   need to greater than SYSTEM_PROC_MAX+1 defined in system_linkId.h
 */
MessageQ.numHeaps = 12;

MultiProc.setConfig(Program.global.procName, procNameAry);

/* ipc configuration */
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');

/* Set host id */
Ipc.hostProcId = MultiProc.getIdMeta("IPU1-0");
Ipc.sr0MemorySetup = true;
Ipc.generateSlaveDataForHost = false;

var srOwnerProcId = Ipc.hostProcId;
var srFrmBufferOwnerProcId = MultiProc.getIdMeta("IPU1-0");


xdc.print("# !!! Host Proc ID is [" + Ipc.hostProcId + "] !!!" );


if( A15TargetOS == "Bios" )
{
    Ipc.procSync = Ipc.ProcSync_ALL;
}
if( A15TargetOS == "Linux")
{

    Ipc.procSync = Ipc.ProcSync_PAIR;
}

/* To avoid wasting shared memory for MessageQ transports */
for (var i=0; i < MultiProc.numProcessors; i++) {
    Ipc.setEntryMeta({
        remoteProcId: i,
        setupNotify:true,
        setupMessageQ:true
    });
}

/* shared region configuration */
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');

SharedRegion.translate = true;

/* Set Shared Region variables by picking up the information from Platform
 * memory map
 */
var sr0MemSection           = Program.cpu.memoryMap['SR0'];
var sr1MemSection           = Program.cpu.memoryMap['SR1_FRAME_BUFFER_MEM'];
var sr2MemSection           = Program.cpu.memoryMap['OCMC_RAM2'];

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */

/*
  This section is the SR0 section of IPC and is
  used for MsgQ's that are present on different processors.
  This section MUST be non-cached on all processor's
*/
SharedRegion.setEntryMeta( 0,
    {
      base:        sr0MemSection.base,
      len:         sr0MemSection.len,
      name:        sr0MemSection.name,
      isValid:     true,
      ownerProcId: srOwnerProcId,
      cacheEnable: false,
      cacheLineSize: 128,
      createHeap:  true
    }
);

/*
  This section is used for frame buffers
  This section can be cached on all processor's
*/
SharedRegion.setEntryMeta( 1,
    {
      base:        sr1MemSection.base,
      len:         sr1MemSection.len,
      name:        sr1MemSection.name,
      isValid:     false,
      ownerProcId: srFrmBufferOwnerProcId,
      cacheEnable: true,
      cacheLineSize: 128,
      createHeap:  true
    }
);

/*
  This section is used for OCMC memory allocation
  This section can be cached on all processor's
*/
SharedRegion.setEntryMeta( 2,
    {
      base:        sr2MemSection.base,
      len:         sr2MemSection.len,
      name:        sr2MemSection.name,
      isValid:     false,
      ownerProcId: srFrmBufferOwnerProcId,
      cacheEnable: true,
      cacheLineSize: 128,
      createHeap:  true
    }
);
