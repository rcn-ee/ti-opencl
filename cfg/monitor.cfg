/*
 * Copyright (c) 2012-2014 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== Dsp1.cfg ========
 *  Platform: DRA7XX_bios_elf
 *  Target: ti.targets.elf.C66
 */
environment['xdc.cfg.check.fatal'] = 'false';
/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');
var cfgArgs = Program.build.cfgArgs;
var RB = false ;//(cfgArgs.profile == "release" ? true : false);

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Registry');

xdc.useModule('ti.sysbios.knl.Task');
var GateProcess = xdc.useModule('xdc.runtime.knl.GateProcess');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = (RB ? BIOS.LibType_NonInstrumented : BIOS.LibType_Instrumented);
// BIOS.libType = BIOS.LibType_Custom;
// BIOS.libType = BIOS.LibType_Debug;

// Program.sectMap[".ddr"] = new Program.SectionSpec();
// Program.sectMap[".ddr"].loadSegment = "DSP1_PROG";
// Program.sectMap[".private"] = new Program.SectionSpec();
// Program.sectMap[".private"].loadSegment = "DSP1_PROG";
// Program.sectMap[".cio"] = new Program.SectionSpec();
// Program.sectMap[".cio"].loadSegment = "DSP1_PROG";
// Program.sectMap[".workgroup_config"] = new Program.SectionSpec();
// Program.sectMap[".workgroup_config"].loadSegment = "DSP1_PROG";


/*
 *  ======== IPC Configuration ========
 */
xdc.global.SR0_cacheEnable = false;
Program.global.procName = "DSP1";
var ipc_cfg = xdc.loadCapsule("ipc.cfg.xs");


/* make SR_0 non-cacheable */
var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
Cache.setMarMeta(0x8E000000, 0x1000000, Cache.Mar_DISABLE);


/* Set the cahce for remaining */
Cache.setMarMeta(0x80000000, 0xE000000, Cache.Mar_ENABLE);
Cache.setMarMeta(0xA0000000, 0xE000000, Cache.Mar_ENABLE);
var obj = new Cache.Size;
   obj.l1pSize = Cache.L1Size_32K;
   obj.l1dSize = Cache.L1Size_32K;
   obj.l2Size = Cache.L2Size_256K;




/* select ipc libraries */
var Build = xdc.useModule('ti.sdo.ipc.Build');
Build.libType = Build.LibType_Debug;// (RB ? Build.LibType_NonInstrumented : Build.LibType_Debug);
Build.assertsEnabled = (RB ? false : true);
Build.logsEnabled = (RB ? false : true);


/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x2000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x4000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* configure System module */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x1000;
SysMin.flushAtExit = false;

var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysMin;

BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 600000000; /* 600 MHz */
/* Turn off the timer frequency check. The DSP timer does not run when
 * the host is halted because of the emulation suspend signal.
 */
    /***********************************************
     *          CLOCK Module Configuraion          *
     ***********************************************/
    var Clock = xdc.useModule("ti.sysbios.knl.Clock");
    Clock.tickMode = Clock.TickMode_PERIODIC;
    Clock.tickSource = Clock.TickSource_USER;
    Clock.tickPeriod    = 1000;

    /* allocate timer 5 to DSP1 */
    var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
    TimerSupport.availMask = 0x0020;

    /***********************************************
    *           Timer Module Configuraion         *
    ***********************************************/
    var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');

    Timer.intFreq.hi = 0;
    /* system clock runs at 16.8 MHz */
    Timer.intFreq.lo = 16800000;

    var timerParams = new Timer.Params();
    timerParams.period = 1000;
    timerParams.twer.ovf_wup_ena = 1;
    timerParams.tiocpCfg.emufree = 1;
    Timer.create(5, '&mainDsp1TimerTick', timerParams);



/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = (RB ? Diags.ALWAYS_OFF : Diags.ALWAYS_ON);
Defaults.common$.diags_ASSERT    = (RB ? Diags.ALWAYS_OFF : Diags.ALWAYS_ON);
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY    = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT     = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO     = Diags.RUNTIME_OFF;
Registry.common$.diags_ANALYSIS = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1    = Diags.RUNTIME_OFF;

/* create a logger instance */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 256;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;


