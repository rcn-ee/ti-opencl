/*******************************************************************************
 *                                                                             *
 * Copyright (c) 2013 Texas Instruments Incorporated - http://www.ti.com/      *
 *                        ALL RIGHTS RESERVED                                  *
 *                                                                             *
 ******************************************************************************/

/*******************************************************************************
*  file name: BIOS_common.cfg
*  Set Bios configuration - Common across all cores
*  This file is included in all core specific cfg files
*
*******************************************************************************/

/* use modules */
var Task        = xdc.useModule("ti.sysbios.knl.Task");
var Idle        = xdc.useModule("ti.sysbios.knl.Idle");
var BIOS        = xdc.useModule("ti.sysbios.BIOS");
var Startup     = xdc.useModule("xdc.runtime.Startup");
var SysStd      = xdc.useModule("xdc.runtime.SysStd");
var System      = xdc.useModule("xdc.runtime.System");
var Log         = xdc.useModule("xdc.runtime.Log");
var Assert      = xdc.useModule("xdc.runtime.Assert");
var Program     = xdc.useModule("xdc.cfg.Program");
var Main        = xdc.useModule("xdc.runtime.Main");
var Memory      = xdc.useModule("xdc.runtime.Memory");
var Diags       = xdc.useModule("xdc.runtime.Diags");
var Semaphore   = xdc.useModule("ti.sysbios.knl.Semaphore");
var HeapMem     = xdc.useModule("ti.sysbios.heaps.HeapMem");
var HeapBuf     = xdc.useModule("ti.sysbios.heaps.HeapBuf");
var Clock       = xdc.useModule("ti.sysbios.knl.Clock");
var Timestamp   = xdc.useModule("xdc.runtime.Timestamp");
var Load        = xdc.useModule('ti.sysbios.utils.Load');
var Hwi         = xdc.useModule('ti.sysbios.hal.Hwi');
var Queue       = xdc.useModule('ti.sysbios.knl.Queue');
var SyncSem     = xdc.useModule('ti.sysbios.syncs.SyncSem');
var Cache       = xdc.useModule('ti.sysbios.hal.Cache');
var halCore     = xdc.useModule('ti.sysbios.hal.Core');
var GateH       = xdc.useModule('xdc.runtime.knl.GateH');
var Event       = xdc.useModule('ti.sysbios.knl.Event');
var biosGates   = xdc.useModule('ti.sysbios.gates.GateTask');

/* BIOS library type, same setting is used by IPC as well */
BIOS.libType = BIOS.LibType_Custom;
var SourceDir = xdc.useModule('xdc.cfg.SourceDir');
SourceDir.verbose = 3;

/* load calculation related settings */
if(BIOS.libType==BIOS.LibType_NonInstrumented)
{
	/* cannot enable these load measurement in non-instrumented libraries */
	Load.swiEnabled   = false;
	Load.hwiEnabled   = false;
	Load.taskEnabled  = false;
}
else
{
	Load.swiEnabled   = true;
	Load.hwiEnabled   = true;
	Load.taskEnabled  = true;
}
Load.updateInIdle = true;
Load.windowInMs   = 500;
Load.postUpdate   = '&Utils_prfLoadUpdate';

/*
 * This value is overridden in EveX.cfg,
 * since a clock tick of 1ms is too high for EVE processing and 
 * adds a constant CPU load overhead, which can be avoided if a larger
 * Clock.tickPeriod is choosen
 */
/* Clock tick in microseconds */
Clock.tickPeriod    = 1000;

/* Stack size when NULL is passed as stack during TSK create    */
Task.defaultStackSize   = 0x4000;

Main.common$.diags_ASSERT   = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;

/*
Set the proxy for System module. This enables print statements at runtime in
the application
*/
System.SupportProxy = SysStd;


/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Registry');


/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_ON;     /* needed for asserts */
Defaults.common$.diags_ASSERT    = Diags.ALWAYS_ON;     /* development only   */
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;

/* create a logger instance */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 256;  /* 256 entries = 8 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;

