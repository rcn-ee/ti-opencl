# Verify that the dependencies exist where stated
ifneq ($(MAKECMDGOALS),clean)
   ifeq (,$(wildcard $(PDK_DIR)/.))
      $(error Path specified for PDK_DIR(=$(PDK_DIR)) is not valid)
   endif
   ifeq (,$(wildcard $(BIOS_DIR)/.)) 
      $(error Path specified for BIOS_DIR(=$(BIOS_DIR)) is not valid)
   endif
   ifeq (,$(wildcard $(OMP_DIR)/.))
      $(error Path specified for OMP_DIR(=$(OMP_DIR)) is not valid)
   endif
   ifeq (,$(wildcard $(IPC_DIR)/.))
      $(error Path specified for IPC_DIR(=$(IPC_DIR)) is not valid)
   endif
   ifeq (,$(wildcard $(FC_DIR)/.))
      $(error Path specified for FC_DIR(=$(FC_DIR)) is not valid)
   endif
   ifeq (,$(wildcard $(EDMA3LLD_DIR)/.))
      $(error Path specified for EDMA3LLD_DIR(=$(EDMA3LLD_DIR)) is not valid)
   endif
   ifeq (,$(wildcard $(XDAIS_DIR)/.))
      $(error Path specified for XDAIS_DIR(=$(XDAIS_DIR)) is not valid)
   endif
   ifeq (,$(wildcard $(XDC_DIR)/.))
      $(error Path specified for XDC_DIR(=$(XDC_DIR)) is not valid)
   endif
#   ifeq (,$(wildcard $(ULM_DIR)/.))
#      $(error Path specified for ULM_DIR(=$(ULM_DIR)) is not valid)
#   endif
#   ifeq (,$(wildcard $(GDB_SERVER_DIR)/.))
#     $(error Path specified for GDB_SERVER_DIR(=$(GDB_SERVER_DIR)) is not valid)
#   endif
endif

BUILD_TYPE = release

INCLUDES = -i $(OPENCL_SRC_DIR)/src/core/dsp
INCLUDES += -DOMP_ENABLED
INCLUDES += -i $(AET_DIR)/include

XDCTARGET= ti.targets.elf.C66
XDCPATH_K2X = ./;$(PDK_DIR)/packages;$(BIOS_DIR)/packages;$(OMP_DIR)/packages;$(EDMA3LLD_DIR)/packages;$(IPC_DIR)/packages;$(FC_DIR)/packages;$(XDAIS_DIR)/packages;
LIBS_K2X = $(AET_DIR)/lib/libaet.ae66 #$(MPM_DIR)/lib_c66x/mpmmailbox.ae66 #$(ULM_DIR)/libtiulm.ae66 $(GDB_SERVER_DIR)/lib/gdb_server.ae66

ifeq ($(BUILD_TARGET),ARM_K2G)
    PLATFORM = evmk2g
    XDCPATH  = $(XDCPATH_K2X)
    INCLUDES += -DDEVICE_K2G
    LIBS = cmds/monitor.$(PLATFORM).cmd $(LIBS_K2X)

    L2SRAM_START = 0x00810000
    L2SRAM_SIZE  = 0x000d0000
    MSMC_SIZE    = 0x00077000
else
    ifeq ($(MAKECMDGOALS),clean)
    else ifeq ($(MAKECMDGOALS),realclean)
    else
        $(error must specify one of: \
        BUILD_TARGET={ARM_K2G})
    endif
endif

BUILD = monitor_$(PLATFORM)
COMP_OPTS = $(BUILD)/compiler.opt
LINK_CMD = $(BUILD)/linker.cmd
OUT=$(BUILD)/dsp0.out

build: $(OUT)

#----------------------------------------------------------------------------
# include libm functions in monitor
#----------------------------------------------------------------------------
LIBM_DIR=../libm
LIBM=$(LIBM_DIR)/libm.lib

$(LIBM): 
	$(MAKE) -C $(LIBM_DIR)

#----------------------------------------------------------------------------
# include builtins functions in monitor
#----------------------------------------------------------------------------
BUILTINS_DIR=../builtins
BUILTINS=$(BUILTINS_DIR)/dsp.lib


$(BUILTINS): 
	$(MAKE) -C $(BUILTINS_DIR)

#---------------------------------------------------------------------------
# build monitor
#----------------------------------------------------------------------------

SOURCES = monitor.c util.c dsp_rpc.asm touch.asm builtins.c \
          edma.c edma3_tci66ak2g02_cfg.c device_k2g.c
HEADERS = src/edma.h src/monitor.h src/util.h src/trace.h \
          $(OPENCL_SRC_DIR)/src/core/dsp/message.h \
          $(OPENCL_SRC_DIR)/src/core/dsp/tal/mbox_msgq_shared.h

OBJS1=$(patsubst %.c,$(BUILD)/%.obj,$(SOURCES))
OBJS=$(patsubst %.asm,$(BUILD)/%.obj,$(OBJS1))

SEDCMD = \
	 sed -e 's|__MSMC_SIZE__|$(MSMC_SIZE)|g' \
	     -e 's|__L2SRAM_START__|$(L2SRAM_START)|g' \
	     -e 's|__L2SRAM_SIZE__|$(L2SRAM_SIZE)|g'

## !Need -O* to inline CACHE_* functions!
CC= /usr/bin/cl6x -o3 -mv6600 --abi=eabi --gcc --mem_model:const=data --mem_model:data=far -fr=$(BUILD) --vectypes=on
#CC= /usr/bin/cl6x -o0 -g -mv6600 --abi=eabi --gcc --mem_model:const=data --mem_model:data=far -fr=$(BUILD)

$(OUT): $(OBJS) $(BUILTINS) $(LIBM) $(LINK_CMD) $(LNK_DEFS) $(LIBS)
	@echo Linking $(PLATFORM)
	@$(CC) -z --priority -w -x -m$(BUILD)/dsp.map --define=DDR3_FCSECTION=DDR3_FC $^ -I$(TI_OCL_CGT_INSTALL)/lib -llibc.a -o $(OUT)
	@echo Creating dsp.syms
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(OUT) | grep PROT | awk -F\| '{ print "\t.weak "$$8"\n"$$8"\t.set "$$2 };' >  $(BUILD)/dsp_syms.asm
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(OUT) | grep FUNC | grep -fexport_syms | awk -F\| '{ print "\t.weak "$$8"\n"$$8"\t.set "$$2 };' >> $(BUILD)/dsp_syms.asm
	@$(CC) $(BUILD)/dsp_syms.asm
	@$(SEDCMD) cmds/dsp_link_commands.template > $(BUILD)/dsp.syms

$(BUILD)/%.obj : src/%.c $(COMP_OPTS) $(HEADERS)
	@echo Compiling $<
	@$(CC) -Isrc -@$(COMP_OPTS) $(INCLUDES) -c $<

$(BUILD)/%.obj : src/%.asm $(COMP_OPTS)
	@echo Compiling $<
	@$(CC) -@$(COMP_OPTS) $(INCLUDES) -c $< 


#--------------------------------------------------------------------------
# generate and build config packages
#--------------------------------------------------------------------------

$(COMP_OPTS): $(LINK_CMD)

$(LINK_CMD): \
    cfg/monitor.$(PLATFORM).cfg \
    platforms/$(PLATFORM)/package/package_platforms.$(PLATFORM).c
	@echo Making $(BUILD) files
	@$(XDC_DIR)/xs --xdcpath "$(XDCPATH)" xdc.tools.configuro -c $(TI_OCL_CGT_INSTALL) --cb -t $(XDCTARGET) -p platforms.$(PLATFORM) -r $(BUILD_TYPE) -o $(BUILD) cfg/monitor.$(PLATFORM).cfg
	@sed '/c6xabi\.exidx/d' $(LINK_CMD) > lnk_tmp
	@mv lnk_tmp $(LINK_CMD)

platforms/$(PLATFORM)/package/package_platforms.$(PLATFORM).c: \
    platforms/$(PLATFORM)/Platform.xdc
	 $(MAKE) BIOS_DIR=$(BIOS_DIR) -C platforms/$(PLATFORM)


#--------------------------------------------------------------------------
# clean
#--------------------------------------------------------------------------

.PHONY: clean
clean:
	@rm -fr monitor_evmk2g
	@$(MAKE) -C platforms/evmk2g clean

.PHONY: realclean
realclean: clean
	@rm -fr libm.cmd libm.fcns builtins.cmd builtins.fcns
	@$(MAKE) -C $(LIBM_DIR) clean
	@$(MAKE) -C $(BUILTINS_DIR) clean
