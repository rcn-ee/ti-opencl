
# Enabling OpenMP in the monitor by default
OMP_ENABLED    ?= 1
export OMP_ENABLED

PLATFORM  = am57x_rtos
PROJECT   = monitor_$(PLATFORM)
DEVICE    = DEVICE_AM572x
SOC       = SOC_AM572x

## !Need -O* to inline CACHE_* functions!
CC= /usr/bin/cl6x -o3 -mv6600 --abi=eabi --gcc --mem_model:const=data --mem_model:data=far -D_SYS_BIOS --vectypes=on
AR= /usr/bin/ar6x

INCLUDES  = -i. -i $(OPENCL_SRC_DIR)/src/core/dsp
INCLUDES += -i $(PDK_DIR)/packages -i $(TI_OCL_CGT_INSTALL)/include \
	    -i $(IPC_DIR)/packages -i $(XDC_DIR)/packages           \
	    -i $(BIOS_DIR)/packages -i $(EDMA3LLD_DIR)/packages     \
	    -i $(FC_DIR)/packages -i $(XDAIS_DIR)/packages -i ../packages
INCLUDES += -D$(DEVICE)
INCLUDES += -D$(SOC)
#INCLUDES += -i $(ULM_DIR) -DULM_ENABLED
#INCLUDES += -i $(GDB_SERVER_DIR)/include -DGDB_ENABLED
INCLUDES += -i $(AET_DIR)/include

ifeq ($(OMP_ENABLED),1)
INCLUDES += -DOMP_ENABLED
endif

SOURCES = monitor.c util.c dsp_rpc.asm touch.asm builtins.c edma.c \
          edma_am57x_config.c device_am57.c \
		  printf.c _printfi.c _ltoa.c
HEADERS = src/edma.h src/monitor.h src/util.h src/trace.h \
          $(OPENCL_SRC_DIR)/src/core/dsp/message.h \
          $(OPENCL_SRC_DIR)/src/core/dsp/tal/mbox_msgq_shared.h
LIBS    = cmds/monitor.am57x_rtos.cmd
#LIBS   += $(ULM_DIR)/libtiulm.ae66
#LIBS   += $(GDB_SERVER_DIR)/lib/gdb_server.ae66
LIBS   += $(AET_DIR)/lib/libaet.ae66
OBJ_DIR = objs
OBJS1=$(patsubst %.c,$(OBJ_DIR)/%.obj,$(SOURCES))
OBJS=$(patsubst %.asm,$(OBJ_DIR)/%.obj,$(OBJS1))
OCLLIB  = libDSPMonitor.ae66
OCLMAIN = rtos_ocl_main

BIN_DIR      = $(PROJECT)

LINK_CMD0 = $(PROJECT)0/linker.cmd
LINK_CMD1 = $(PROJECT)1/linker.cmd

L2SRAM_SIZE  = 0x00020000
L2SRAM_START = 0x00808000
MSMC_SIZE    = 0x00100000

#----------------------------------------------------------------------------
# XDC stuff
#----------------------------------------------------------------------------
XDCPATH = ./;$(IPC_DIR)/packages;$(BIOS_DIR)/packages;$(OMP_DIR)/packages;$(EDMA3LLD_DIR)/packages;$(FC_DIR)/packages;$(XDAIS_DIR)/packages;$(PDK_DIR)/packages;../packages
MONITOR_CONFIG = ../packages/ti/opencl/Dsp.cfg

XDCTARGET = ti.targets.elf.C66

COMP_OPTS  = $(PROJECT)/compiler.opt
BUILD_TYPE = release


#----------------------------------------------------------------------------
# LIBM
#----------------------------------------------------------------------------
LIBM_DIR=../libm
LIBM=$(LIBM_DIR)/libm.lib


#----------------------------------------------------------------------------
# BUILTINS
#----------------------------------------------------------------------------
BUILTINS_DIR=../builtins
BUILTINS=$(BUILTINS_DIR)/dsp.lib


SEDCMD = \
	 sed -e 's|__MSMC_SIZE__|$(MSMC_SIZE)|g' \
	     -e 's|__L2SRAM_START__|$(L2SRAM_START)|g' \
	     -e 's|__L2SRAM_SIZE__|$(L2SRAM_SIZE)|g'

#---------------------------------------------------------------------------
# Function to create the dsp symbols database
#----------------------------------------------------------------------------
define create_dsp_syms
	@echo Creating $(2)
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep PROT | awk -F\| '{ print "\t.weak "$$8"\n"$$8"\t.set "$$2 };' >  $(2).asm
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep FUNC | grep -fexport_syms | awk -F\| '{ print "\t.weak "$$8"\n"$$8"\t.set "$$2 };' >> $(2).asm
	@$(CC) -fr=$(BIN_DIR) $(2).asm
	@$(SEDCMD) cmds/dsp_link_commands.template > $(2)
	@rm -f $(1).syms.tmp* $(2).asm
endef

#---------------------------------------------------------------------------
# Function to check if dsp exported syms are laid out exactly the same
# on both dsp cores: the addresses are either equal (in internal memory)
# or differ by the DDR offset of DSP1_PROG memory and DSP2_PROG memory
# $1: dsp0.out, $2: dsp1.out, $3: DDR offset (0x0100_0000 in default memory map)
#----------------------------------------------------------------------------
define check_dsp_syms_layout
	@echo Checking if DSP exported syms are laid out the same: $(1) $(2)
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep PROT | awk -F\| '{ print $$8" "$$2 };' >  $(1).expsyms
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(1) | grep FUNC | grep -fexport_syms | awk -F\| '{ print $$8" "$$2 };' >> $(1).expsyms
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(2) | grep PROT | awk -F\| '{ printf "%s 0x%.8x\n", $$8, strtonum($$2) >= strtonum(0x80000000) ? strtonum($$2) - strtonum($(3)) : strtonum($$2) };' >  $(2).expsyms
	@$(TI_OCL_CGT_INSTALL)/bin/nm6x -l $(2) | grep FUNC | grep -fexport_syms | awk -F\| '{ printf "%s 0x%.8x\n", $$8, strtonum($$2) >= strtonum(0x80000000) ? strtonum($$2) - strtonum($(3)) : strtonum($$2) };' >> $(2).expsyms
        diff $(1).expsyms $(2).expsyms; if [ $$? -ne 0 ]; then echo;  echo "   *** Different!!! ***"; echo; exit 1; fi
	@rm -f $(1).expsyms $(2).expsyms
endef


.PHONY: all dsp0 dsp1
all: dsp0 dsp1
#	$(call check_dsp_syms_layout, dsp0.out, dsp1.out, 0x01000000)

$(OBJ_DIR):
	mkdir -p $(OBJ_DIR) $(BIN_DIR)

dsp0 : $(LINK_CMD0) $(BIN_DIR)/dsp0.out $(BIN_DIR)/dsp0.syms
dsp1 : $(LINK_CMD1) $(BIN_DIR)/dsp1.out $(BIN_DIR)/dsp1.syms


#---------------------------------------------------------------------------
# Build monitors
#----------------------------------------------------------------------------
$(BIN_DIR)/dsp0.out: $(OBJ_DIR)/$(OCLMAIN).obj $(LINK_CMD0) $(LNK_DEFS) $(LIBS)
	@echo Linking $@
	@echo $(LINK_CMD0)
	$(CC) -z --priority -w -x --reread_libs -m$@.map \
	--define=DDR3=DSP1_PROG \
	--define=DDR3_FCSECTION=DSP1_PROG --define=DDR3_NC=OCL_OMP_NOCACHE $^ \
	-I$(TI_OCL_CGT_INSTALL)/lib -llibc.a -o $@

$(BIN_DIR)/dsp1.out: $(OBJ_DIR)/$(OCLMAIN).obj $(LINK_CMD1) $(LNK_DEFS) $(LIBS)
	@echo Linking $@
	@echo $(LINK_CMD1)
	$(CC) -z --priority -w -x -m$@.map \
	--define=DDR3=DSP2_PROG \
	--define=DDR3_FCSECTION=DSP2_PROG --define=DDR3_NC=OCL_OMP_NOCACHE  $^ \
	-I$(TI_OCL_CGT_INSTALL)/lib -llibc.a -o $@

$(BIN_DIR)/%.syms: $(BIN_DIR)/%.out export_syms
	$(call create_dsp_syms, $<, $@)

$(OCLLIB): $(OBJS) $(BUILTINS) $(LIBM)
	$(AR) r $@ $(OBJS)

$(LIBM):
	$(MAKE) -C $(LIBM_DIR) -j4

$(BUILTINS):
	$(MAKE) -C $(BUILTINS_DIR) -j4

platform_files:
	$(MAKE) -C ../packages/ti/opencl/platforms/am57x_rtos

.PHONY: $(MONITOR_CONFIG)
$(MONITOR_CONFIG):
	$(MAKE) -C ../packages/ti/opencl

$(LINK_CMD0): $(OCLLIB) $(MONITOR_CONFIG) platform_files
	$(XDC_DIR)/xs --xdcpath "$(XDCPATH)" xdc.tools.configuro -c $(TI_OCL_CGT_INSTALL) --cb -t $(XDCTARGET) -p ti.opencl.platforms.$(PLATFORM):DSP1 -r $(BUILD_TYPE) -DDSPCORE=0 -Dxdc.platform.custom.check="false" -o $(PROJECT)0 $(MONITOR_CONFIG)
	@sed '/c6xabi\.exidx/d' $(LINK_CMD0) > lnk_tmp0
	@mv lnk_tmp0 $(LINK_CMD0)

$(LINK_CMD1): $(OCLLIB) $(MONITOR_CONFIG) platform_files
	$(XDC_DIR)/xs --xdcpath "$(XDCPATH)" xdc.tools.configuro -c $(TI_OCL_CGT_INSTALL) --cb -t $(XDCTARGET) -p ti.opencl.platforms.$(PLATFORM):DSP2 -r $(BUILD_TYPE) -DDSPCORE=1 -Dxdc.platform.custom.check="false" -o $(PROJECT)1 $(MONITOR_CONFIG)
	@sed '/c6xabi\.exidx/d' $(LINK_CMD1) > lnk_tmp1
	@mv lnk_tmp1 $(LINK_CMD1)

#---------------------------------------------------------------------------
# Default build rules
#----------------------------------------------------------------------------
$(OBJ_DIR)/%.obj : src/%.c $(HEADERS) $(OBJ_DIR)
	@echo Compiling $<
	$(CC) -Isrc $(INCLUDES) -c $< -fr=$(OBJ_DIR)

$(OBJ_DIR)/%.obj : src/%.asm $(OBJ_DIR)
	@echo Compiling $<
	$(CC) $(INCLUDES) -c $< -fr=$(OBJ_DIR)

.PHONY: clean
clean: cleanplatform
	@rm -fr *.ae66 libm.cmd libm.fcns builtins.cmd builtins.fcns $(PROJECT)0 $(PROJECT)1 $(OBJ_DIR) $(BIN_DIR)

.PHONY: cleanplatform
cleanplatform:
	@$(MAKE) -C ../packages/ti/opencl/platforms/$(PLATFORM) clean

.PHONY: realclean
realclean: clean cleanplatform
	@$(MAKE) -C $(LIBM_DIR) clean
	@$(MAKE) -C $(BUILTINS_DIR) clean

