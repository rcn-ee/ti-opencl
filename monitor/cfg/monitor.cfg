environment['xdc.cfg.check.fatal'] = 'false';

/*-----------------------------------------------------------------------------
* Packages
*----------------------------------------------------------------------------*/
var Defaults     = xdc.useModule('xdc.runtime.Defaults');
var Diags        = xdc.useModule('xdc.runtime.Diags');
var Error        = xdc.useModule('xdc.runtime.Error');
var Log          = xdc.useModule('xdc.runtime.Log');
var LoggerBuf    = xdc.useModule('xdc.runtime.LoggerBuf');
var Main         = xdc.useModule('xdc.runtime.Main');
var Memory       = xdc.useModule('xdc.runtime.Memory')
var Text         = xdc.useModule('xdc.runtime.Text');
var BIOS         = xdc.useModule('ti.sysbios.BIOS');
var ECM          = xdc.useModule('ti.sysbios.family.c64p.EventCombiner');
var HeapMem      = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Hwi          = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Idle         = xdc.useModule('ti.sysbios.knl.Idle');
var Load         = xdc.useModule('ti.sysbios.utils.Load');
var Task         = xdc.useModule('ti.sysbios.knl.Task');
var Sem          = xdc.useModule('ti.sysbios.knl.Semaphore');
var CslSettings  = xdc.useModule('ti.csl.Settings');


// Remove SemProcess.Proxy is not bound to OS specific implementation error
var SemProcess = xdc.useModule('xdc.runtime.knl.SemProcess');
SemProcess.Proxy = xdc.useModule('ti.sysbios.xdcruntime.SemProcessSupport');

/*
 *  ======== IPC Configuration ========
 */
xdc.useModule('ti.sdo.ipc.Ipc');
xdc.useModule('ti.ipc.ipcmgr.IpcMgr');

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
if (String(Program.cpu.deviceName).search("K2E") != -1)
{
    MultiProc.setConfig(null, ["HOST", "CORE0"]);
} else if (String(Program.cpu.deviceName).search("K2L") != -1) {
    MultiProc.setConfig(null, ["HOST", "CORE0", "CORE1", "CORE2", "CORE3"]);
} else {
    MultiProc.setConfig(null, ["HOST", "CORE0", "CORE1", "CORE2", "CORE3",
                               "CORE4", "CORE5", "CORE6", "CORE7"]);
}

Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns.$add('&set_mpax_before_cinit');

BIOS.addUserStartupFunction('&IpcMgr_ipcStartup');

/* default memory heap */
var Memory = xdc.useModule('xdc.runtime.Memory');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x8000;
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);


/* create a heap for MessageQ messages */
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var params = new HeapBuf.Params;
params.align = 8;
params.blockSize = 512;
params.numBlocks = 18;
params.sectionName = ".private";
var msgHeap = HeapBuf.create(params);

var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');
MessageQ.registerHeapMeta(msgHeap, 0);

/* Setup MessageQ transport */
var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportRpmsgSetup');
MessageQ.SetupTransportProxy = VirtioSetup;

/* Setup NameServer remote proxy */
var NameServer = xdc.useModule("ti.sdo.utils.NameServer");
var NsRemote = xdc.useModule("ti.ipc.namesrv.NameServerRemoteRpmsg");
NameServer.SetupProxy = NsRemote;

var RPMsg = xdc.useModule("ti.ipc.rpmsg.RPMessage");
RPMsg.numMessageBuffers = 18;
RPMsg.messageBufferSize = 512;

/*-----------------------------------------------------------------------------
* Settings for K2x only: 'deviceType' property does not exist in 6678 csl
*----------------------------------------------------------------------------*/
if ('deviceType' in CslSettings) 
{
    if (String(Program.cpu.deviceName).search("6638") != -1)
    {
       CslSettings.deviceType  = "k2h";
    }
    else if (String(Program.cpu.deviceName).search("K2L") != -1)
    {
       CslSettings.deviceType  = "k2l";
    }
    else if (String(Program.cpu.deviceName).search("K2E") != -1)
    {
       CslSettings.deviceType  = "k2e";
    }
    else
       Program.$logError("Device:" + Program.cpu.deviceName +
                          " not supported", this);

    var CPINTC       = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
    var EdmaMgr      = xdc.useModule('ti.sdo.fc.edmamgr.EdmaMgr');
    /*-------------------------------------------------------------------------
    * To prevent EdmaMgr from use DSKT2
    *------------------------------------------------------------------------*/
    var RMAN                = xdc.useModule('ti.sdo.fc.rman.RMAN');
    RMAN.useDSKT2           = false;
    RMAN.persistentAllocFxn = "EdmaMgr_heap_alloc";
    RMAN.persistentFreeFxn  = "EdmaMgr_heap_free";
    /*-------------------------------------------------------------------------
    * Configure heap for FC use 
    *------------------------------------------------------------------------*/
    Program.sectMap[".INTMEM_HEAP"] = new Program.SectionSpec();
    Program.sectMap[".INTMEM_HEAP"].runSegment   = "DDR3_VIRT";
    Program.sectMap[".INTMEM_HEAP"].loadSegment  = "DDR3_PER_CORE";
    Program.sectMap[".INTMEM_HEAP"].fill   = 0;

    var heapMemParams          = new HeapMem.Params();
    heapMemParams.size         = 0x1500;         // Size for internal heap
    heapMemParams.sectionName  = ".INTMEM_HEAP";
    Program.global.INTMEM_HEAP = HeapMem.create(heapMemParams);
}

/* Use custom resource table for remoteproc */
/* Table contains entry for TRACEBUF ADDR and SIZE from SysMin */
var Resource = xdc.useModule('ti.ipc.remoteproc.Resource');
Resource.loadSegment = Program.platform.dataMemory;
Resource.customTable = true;

/*  Use SysMin because trace buffer address is required for Linux/QNX
 *  trace debug driver, plus provides better performance.
 */
var System = xdc.useModule('xdc.runtime.System');
var SysMin = xdc.useModule('ti.trace.SysMin');
SysMin.bufSize = 0x1800;
System.SupportProxy = SysMin;

/*-----------------------------------------------------------------------------
* Settings
*----------------------------------------------------------------------------*/
//BIOS.libType                    = BIOS.LibType_Debug;
Task.common$.namedInstance      = true; // Enable instance names
Load.hwiEnabled                 = false;
Load.swiEnabled                 = false;
Load.taskEnabled                = true;
Program.argSize                 = 0;
Program.stack                   = 0x1000;
var memmap                      = Program.cpu.memoryMap;
var profile                     = Program.build.profile;


// From BIOS documentation:
// This option provides the user with the ability to optimize interrupt dispatcher performance 
// when support for interrupt nesting is not required.
// Set this parameter to false if you don't need interrupts enabled during the execution of your Hwi functions.
// Will setting this to false conflict with MessageQ Hwi requirements???
//Hwi.dispatcherAutoNestingSupport= false;


/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
ECM.eventGroupHwiNum[0]         = 8;
ECM.eventGroupHwiNum[1]         = 9;
ECM.eventGroupHwiNum[2]         = 10;
ECM.eventGroupHwiNum[3]         = 11;

/*-----------------------------------------------------------------------------
* Section Mapping
*----------------------------------------------------------------------------*/
/* Exclude sections which will be placed by linker command file */
Program.sectionsExclude = "^\.fardata$|^\.far$";

Program.sectMap["systemHeap"]               = Program.platform.stackMemory;
Program.sectMap[".cinit"]                   = "DDR3";
Program.sectMap[".text"]                    = "DDR3";
Program.sectMap[".ddr"]                     = "DDR3";
Program.sectMap[".const"]                   = "DDR3";
Program.sectMap[".switch"]                  = "DDR3";
Program.sectMap[".plt"]                     = "DDR3";
Program.sectMap[".data"] 		    = "DDR3";
Program.sectMap[".bss"] 		   = "DDR3";
Program.sectMap[".neardata"] 	 	   = "DDR3";
Program.sectMap[".rodata"] 		   = "DDR3";
Program.sectMap[".cio"] 		   = "L2SRAM";
Program.sectMap[".tracebuf"] 		   = "L2SRAM";


Program.sectMap["platform_lib"]             = "L2SRAM";
Program.sectMap[".private"]                 = new Program.SectionSpec();
Program.sectMap[".private"].loadSegment     = "L2SRAM";
Program.sectMap[".private"].fill            = 0;


Program.sectMap[".fast_shared_noncached"]              = new Program.SectionSpec();
Program.sectMap[".fast_shared_noncached"].loadSegment  = "MSMC_NC_PHYS";
Program.sectMap[".fast_shared_noncached"].runSegment   = "MSMC_NC_VIRT";
Program.sectMap[".fast_shared_noncached"].fill         = 0;

Program.sectMap[".cppi"]                    = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".qmss"]                    = Program.sectMap[".fast_shared_noncached"];
Program.sectMap[".tomp_svNcMem"]            = Program.sectMap[".fast_shared_noncached"];


/*-----------------------------------------------------------------------------
* OpenMP Configuration
*----------------------------------------------------------------------------*/
if (1)
{
/* Include OMP runtime in the build */
var omp = xdc.useModule("ti.runtime.openmp.Settings");
omp.usingRtsc   = true;
omp.usingOpenCL = true;

/* Size of the heap shared by all the cores */
/** var sharedHeapSize = 0x8000;  **/
//var sharedHeapSize = 0x14000;
var sharedHeapSize = 0x814000;  // make 8M avail for c code from kernels

var OpenMP = xdc.useModule('ti.runtime.ompbios.OpenMP');
/* Configure the index of the master core and the number of cores */
OpenMP.masterCoreIdx = 0;

if(Program.cpu.deviceName == "TMS320TCI6638")
    OpenMP.numCores      = 8;
else if(Program.cpu.deviceName == "TMS320TCI6630K2L")
    OpenMP.numCores      = 4;
else if(Program.cpu.deviceName == "TMS320C66AK2E05")
    OpenMP.numCores      = 1;
else if(Program.cpu.deviceName == "TMS320C6678")
    OpenMP.numCores      = 8;
else
    OpenMP.numCores      = -1;

/* Do not use an IPC heap */
OpenMP.useIpcSharedHeap = false;

/* Size heap internal to bios */
OpenMP.allocateLocalHeap = true;
OpenMP.allocateLocalHeapSize = 0x1000;

/* Size DSP shared heap for malloc in DDR3 */
OpenMP.allocateSharedHeap = true;
OpenMP.allocateSharedHeapSize = 0x00814000;

var MemAlloc = xdc.useModule('ti.sysbios.rts.MemAlloc');
MemAlloc.generateFunctions = false;

var Sem = xdc.useModule('ti.sysbios.knl.Semaphore');
var instSem0_Params = new Sem.Params();
instSem0_Params.mode = Sem.Mode_BINARY;
Program.global.runOmpSem = Sem.create(0, instSem0_Params);
Program.global.runOmpSem_complete = Sem.create(0, instSem0_Params);

Program.sectMap[".sysmem"]                  = new Program.SectionSpec();
Program.sectMap[".sysmem"].type             = "NOLOAD"
Program.sectMap[".sysmem"].loadSegment      = "DDR3_HEAP";

}

/*-----------------------------------------------------------------------------
* The following is for enabling FC trace using stdio
*----------------------------------------------------------------------------*/
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();
 
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

/* enable runtime Diags_setMask() for non-XDC spec'd modules */
var Diags = xdc.useModule('xdc.runtime.Diags');
Diags.setMaskEnabled = true;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta("xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO, Diags.RUNTIME_ON);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;
Registry.common$.diags_USER6 = Diags.ALWAYS_ON;
Registry.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Registry.common$.diags_STATUS = Diags.RUNTIME_OFF;

var Main = xdc.useModule('xdc.runtime.Main');
Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Main.common$.diags_USER6 = Diags.ALWAYS_ON;

