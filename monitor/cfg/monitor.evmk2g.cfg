/*
 * Copyright (c) 2013-2015 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== Core0.cfg ========
 *  Platform: 66AK2G_linux_elf
 *  Target: ti.targets.elf.C66
 */

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Registry');

xdc.useModule('ti.sysbios.knl.Semaphore');
xdc.useModule('ti.sysbios.knl.Task');

/*
 *  ======== IPC Configuration ========
 */
xdc.useModule('ti.sdo.ipc.Ipc');
xdc.useModule('ti.ipc.ipcmgr.IpcMgr');

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("CORE0", ["HOST", "CORE0"]);

var BIOS        = xdc.useModule('ti.sysbios.BIOS');
BIOS.addUserStartupFunction('&IpcMgr_ipcStartup');

/*
 *  ======== SYS/BIOS Configuration ========
 */
if (Program.build.profile == "debug") {
    BIOS.libType = BIOS.LibType_Debug;
} else {
    BIOS.libType = BIOS.LibType_Custom;
}

/* no rts heap */
Program.argSize = 100;  /* minimum size */
Program.stack = 0x0800;

/* BIOS semaphore */
var Sem = xdc.useModule('ti.sysbios.knl.Semaphore');
var instSem0_Params = new Sem.Params();
instSem0_Params.mode = Sem.Mode_BINARY;
Program.global.runOmpSem = Sem.create(0, instSem0_Params);
Program.global.runOmpSem_complete = Sem.create(0, instSem0_Params);

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.common$.namedInstance = true;

/* default memory heap */
var Memory = xdc.useModule('xdc.runtime.Memory');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x8000;
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* create a heap for MessageQ messages */
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var params = new HeapBuf.Params;
params.align = 8;
params.blockSize = 512;
params.numBlocks = 20;
var msgHeap = HeapBuf.create(params);

var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');
MessageQ.registerHeapMeta(msgHeap, 0);

/* Setup MessageQ transport */
var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportRpmsgSetup');
MessageQ.SetupTransportProxy = VirtioSetup;

/* Setup NameServer remote proxy */
var NameServer = xdc.useModule("ti.sdo.utils.NameServer");
var NsRemote = xdc.useModule("ti.ipc.namesrv.NameServerRemoteRpmsg");
NameServer.SetupProxy = NsRemote;


/*  Use SysMin because trace buffer address is required for Linux/QNX
 *  trace debug driver, plus provides better performance.
 */
var System = xdc.useModule('xdc.runtime.System');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize  = 0x8000;
SysMin.sectionName = ".sysmin";

var EdmaMgr      = xdc.useModule('ti.sdo.fc.edmamgr.EdmaMgr');
/*-------------------------------------------------------------------------
* To prevent EdmaMgr from use DSKT2
*------------------------------------------------------------------------*/
var RMAN                = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2           = false;
RMAN.persistentAllocFxn = "EdmaMgr_heap_alloc";
RMAN.persistentFreeFxn  = "EdmaMgr_heap_free";
/*-------------------------------------------------------------------------
* Configure heap for FC use
*------------------------------------------------------------------------*/
Program.sectMap[".INTMEM_HEAP"] = new Program.SectionSpec();
Program.sectMap[".INTMEM_HEAP"].loadSegment = "DDR3";
var HeapMem                = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams          = new HeapMem.Params();
heapMemParams.size         = 0x1500;         // Size for internal heap
heapMemParams.align        = 0x80;
heapMemParams.sectionName  = ".INTMEM_HEAP";
Program.global.INTMEM_HEAP = HeapMem.create(heapMemParams);

/*-----------------------------------------------------------------------------
* Section Mapping
*----------------------------------------------------------------------------*/
Program.sectionsExclude = "^\.fardata$|^\.far$";

Program.sectMap[".cinit"]                  = "DDR3";
Program.sectMap[".text"]                   = "DDR3";
Program.sectMap[".ddr"]                    = "DDR3";
Program.sectMap[".const"]                  = "DDR3";
Program.sectMap[".switch"]                 = "DDR3";
Program.sectMap[".plt"]                    = "DDR3";
Program.sectMap[".data"]                   = "DDR3";
Program.sectMap[".bss"]                    = "DDR3";
Program.sectMap[".neardata"]               = "DDR3";
Program.sectMap[".rodata"]                 = "DDR3";
Program.sectMap[".cio"]                    = "L2SRAM";
Program.sectMap[".gdb_server"]             = "L2SRAM";
Program.sectMap[".sysmin"]                 = "L2SRAM";

Program.sectMap[".tomp_svNcMem"]           = "DDR3_NC";
Program.sectMap[".tomp_gvMem"]             = "L2SRAM";

Program.sectMap[".tracebuf"] = "DDR3";
Program.sectMap[".errorbuf"] = "DDR3";

Program.sectMap[".private"]                 = new Program.SectionSpec();
Program.sectMap[".private"].loadSegment     = "L2SRAM";
Program.sectMap[".private"].fill            = 0;

Program.sectMap[".sysmem"]                  = new Program.SectionSpec();
Program.sectMap[".sysmem"].type             = "NOLOAD"
Program.sectMap[".sysmem"].loadSegment      = "DDR3_HEAP";

Program.sectMap[".text:_c_int00"] = new Program.SectionSpec();
Program.sectMap[".text:_c_int00"].loadSegment = "L2SRAM";
Program.sectMap[".text:_c_int00"].loadAlign = 0x400;

/*-----------------------------------------------------------------------------
* OpenMP Configuration
*----------------------------------------------------------------------------*/
var omp = xdc.useModule("ti.runtime.openmp.Settings");
omp.usingRtsc   = true;
omp.usingOpenCL = true;

var OpenMP = xdc.useModule('ti.runtime.ompbios.OpenMP');
OpenMP.masterCoreIdx = 0;
OpenMP.numCores      = 1;

/* Do not use an IPC heap */
OpenMP.useIpcSharedHeap = false;

/* Size heap internal to bios */
OpenMP.allocateLocalHeap = true;
OpenMP.allocateLocalHeapSize = 0x40000;

/* Size DSP shared heap for malloc in DDR3 */
OpenMP.allocateSharedHeap = true;
OpenMP.allocateSharedHeapSize = 0x00800000;

/*-----------------------------------------------------------------------------
* Put DSP into IDLE state during idle: workaround for PLSDK-1670, MCT-842
*----------------------------------------------------------------------------*/
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
Idle.addFunc('&OclPower_idle');

/*-----------------------------------------------------------------------------
*----------------------------------------------------------------------------*/

var Hwi = xdc.useModule('ti.sysbios.family.c64p.Hwi');
Hwi.enableException = true;

/* Enable Memory Translation module that operates on the Resource Table */
/* Use default resource table for K2G */
var Resource = xdc.useModule('ti.ipc.remoteproc.Resource');
Resource.loadSegment = Program.platform.dataMemory;

/*
 *  ======== Instrumentation Configuration ========
 */

/* system logger */
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

/* enable runtime Diags_setMask() for non-XDC spec'd modules */
var Diags = xdc.useModule('xdc.runtime.Diags');
Diags.setMaskEnabled = true;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta("xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO, Diags.RUNTIME_ON);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;
Registry.common$.diags_USER6 = Diags.ALWAYS_ON;
Registry.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Registry.common$.diags_STATUS = Diags.RUNTIME_OFF;

var Main = xdc.useModule('xdc.runtime.Main');
Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;
Main.common$.diags_USER6 = Diags.ALWAYS_ON;

var MemAlloc = xdc.useModule('ti.sysbios.rts.MemAlloc');
MemAlloc.generateFunctions = false;
